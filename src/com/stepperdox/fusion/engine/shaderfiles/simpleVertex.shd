#version 400 core

in vec3 positions;
in vec2 textures;
in vec3 normals;
in vec3 tangents;
in vec3 bitangents;

out vec2 passTex;
out vec3 surfaceNorm;
out vec3 toLightVector[30];
out vec3 toCameraVector;
out float visibility;
out bool fake;
out mat3 TBN;

uniform float rows;
uniform vec2 index;
uniform mat4 transformationMat;
uniform mat4 projectionMat;
uniform mat4 viewMat;
uniform vec3 lightPosition[30];
uniform fakeLight;

const float density = 0.0035;
const float gradient = 5.0;

void main(void){
	TBN = calculateTBN();
	
	vec4 worldPosition = transformationMat * vec4(positions, 1.0);
	vec4 positionRelativeToCam = viewMat * worldPosition;
	gl_Position = projectionMat * positionRelativeToCam;
	passTex = (textures / rows) + index;
	
	vec3 actualNormal = normals;
	
	if(fakeLight > 0.5){
		actualNormal = vec3 (0.0, 1.0, 0.0);
		fake = true;
	}else{
		fake = false;
	}
	
	surfaceNorm = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	
	for(int i = 0; i < 30; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	toCameraVector = (inverse(viewMat) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
}

mat3 calculateTBN(){
	vec3 T = normalize(vec3(transformationMat * vec4(tangents,   0.0)));
	vec3 B = normalize(vec3(transformationMat * vec4(bitangents, 0.0)));
	vec3 N = normalize(vec3(transformationMat * vec4(normals,    0.0)));
	return mat3 TBN = mat3(T, B, N);
}
