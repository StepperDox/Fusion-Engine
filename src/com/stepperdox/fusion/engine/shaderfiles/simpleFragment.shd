#version 400 core

in vec2 passTex;
in vec3 surfaceNorm;
in vec3 toLightVector[30];
in vec3 toCameraVector;
in float visibility;
in bool fake;
in mat3 TBN;

out vec4 outColor;

uniform sampler2D ambient;
uniform sampler2D diffuse;
uniform sampler2D specular;
uniform sampler2D normal;
uniform sampler2D glow;
uniform vec3 lightColor[30];
uniform float shine;
uniform float diffuseF;
uniform float transparent;
uniform vec3 skyColor;

uniform float isFog;
uniform vec3 fogColor;

void main(void){
	vec3 iNormal;
	if(!fake){
		iNormal = calcNormal();
	}
	
	vec3 unitNormal = normalize(surfaceNormal * iNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 30; i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, (diffuseF * diffuse.a));
		totalDiffuse = totalDiffuse + brightness * (lightColor[i] * diffuse);
		totalSpecular = totalSpecular + dampedFactor * shine * (lightColor[i] * specular);
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColor = texture(ambient, passTex);
	if(textureColor.a < 0.3){
		discard;
	}
	
	outColor = vec4(totalDiffuse, 1.0) * (textureColor + glow.rgba) + vec4(totalSpecular, 1.0);
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}

vec3 calcNormal(){
	vec3 norm = texture(normal, passTex).rgb;
	norm = normalize(norm * 2.0 - 1.0);
	norm = normalize(TBN * norm);
	return norm;
}
